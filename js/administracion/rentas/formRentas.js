/*
 * File: formAgentes.js
 * Date: Thu Feb 02 2017 23:47:25 GMT-0700 (Hora estándar Montañas (México))
 * 
 * This file was generated by Ext Designer version 1.1.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */
Ext.ns('eNuevoOriente');
formRentas = Ext.extend(formRentasUi, {
	idReg:0,
	idSeleccionado:0,
	renderStatusRenta:function(val,m,rec,x,ix,s){
		var value = '';
		if(val==2)
			value = '<img src="images/iconos/status3.png" />'		
		else
			value = '<img src="images/iconos/status1.png" />'
		
		if (rec.data.status_renta == 2){
            m.attr =
            'ext:qtip="' + 
                "<div class='toolTip-Informacion'>Vencida</div>" + 
            '"';
            
        }else{
			m.attr =
            'ext:qtip="' + 
                "<div class='toolTip-Informacion'>Sin Vencimiento</div>" + 
            '"';
		}	
		
		
		return value;
	},
	inicializarStores: function(){
		this.cmbCliente.store =  new eNuevoOriente.storeFormRentasClientes();
		this.cmbCliente.store.load();	
		this.cmbTrabajador.store = new eNuevoOriente.storeFormRentasTrabajadores();
		this.cmbTrabajador.store.load();					
		this.cmbStatusRenta.store = new eNuevoOriente.storeStatus();  
		
		
		this.gridRentas.store=new eNuevoOriente.storeGridRentas();
		this.gridRentas.bottomToolbar.bindStore(this.gridRentas.getStore());
		this.gridRentas.bottomToolbar.pageSize=eNuevoOriente.parametros.registros_pagina;
		var dt = new Date();
		//var dt1 = new Date();			
		//dt1.setDate(dt1.getDate()-7);	
		this.txtFechaInicio.setValue(dt);
		this.txtFechaFin.setValue(dt);
		
		//this.gridRentas.bottomToolbar.doRefresh();
	},
	inicializarEventos: function(){
		var me = this;
		
		var data=new Array(
							{id:0,nombre:eNuevoOriente.formatearTexto('TODOS')},
							{id:1,nombre:eNuevoOriente.formatearTexto('SIN VENCIMIENTO')},
							{id:2,nombre:eNuevoOriente.formatearTexto('VENCIDAS')}
							
					);
			 this.cmbStatusRenta.store.loadData({data:data});
			 this.cmbStatusRenta.setValue(0);	
				
		
		this.txtFiltro.on('specialkey',function(comp,e){		
			if (e.getCharCode()==e.ENTER){
				this.gridRentas.bottomToolbar.doRefresh();
			}
		},this);	
		
		this.cmbCliente.addListener('beforequery',function(qe){
			delete qe.combo.lastQuery; 	//PARA QUE SIEMPRE REALICE LA CONSULTA AL SERVIDOR
		},this);
		
		this.cmbTrabajador.addListener('beforequery',function(qe){
			delete qe.combo.lastQuery; 	//PARA QUE SIEMPRE REALICE LA CONSULTA AL SERVIDOR
		},this);
		
		this.cmbCliente.onTriggerClick = function(a, e){
			if(e){
				if(e.getAttribute('class').indexOf('x-form-clear-trigger') > -1){
					if(this.isExpanded()){
						this.collapse();
						this.el.focus();
					}
					if(!Ext.isEmpty(me.cmbCliente.getValue())){
						this.reset();	
						me.gridRentas.bottomToolbar.doRefresh();	
						
					}
				}else{
					if(this.readOnly || this.disabled){
						return;
					}
					if(this.isExpanded()){
						this.collapse();
						this.el.focus();
					}else {
						this.onFocus({});
						if(this.triggerAction == 'all') {
							this.doQuery(this.allQuery, true);
						} else {
							this.doQuery(this.getRawValue());
						}
						this.el.focus();
					}
				} 
			}
		};
		
		this.cmbTrabajador.onTriggerClick = function(a, e){
			if(e){
				if(e.getAttribute('class').indexOf('x-form-clear-trigger') > -1){
					if(this.isExpanded()){
						this.collapse();
						this.el.focus();
					}
					if(!Ext.isEmpty(me.cmbTrabajador.getValue())){
						this.reset();	
						me.gridRentas.bottomToolbar.doRefresh();	
						
					}
				}else{
					if(this.readOnly || this.disabled){
						return;
					}
					if(this.isExpanded()){
						this.collapse();
						this.el.focus();
					}else {
						this.onFocus({});
						if(this.triggerAction == 'all') {
							this.doQuery(this.allQuery, true);
						} else {
							this.doQuery(this.getRawValue());
						}
						this.el.focus();
					}
				} 
			}
		};
		
		this.chkFechas.on('check', function(e){
			if(this.chkFechas.checked)
			{
				this.txtFechaInicio.setDisabled(false);
				this.txtFechaFin.setDisabled(false);
				
			}else{
				this.txtFechaInicio.setDisabled(true);
				this.txtFechaFin.setDisabled(true);
			}	
			
		}, this);
		
		this.btnCobradas.on('click', function(){
			if (this.btnRecogidas.pressed) this.btnRecogidas.toggle();
			this.gridRentas.bottomToolbar.doRefresh();
		}, this );
		
		this.btnRecogidas.on('click', function(){
			if (this.btnCobradas.pressed) this.btnCobradas.toggle();
			this.gridRentas.bottomToolbar.doRefresh();
		}, this );
		
		this.btnActualizar.on('click', function(){
			this.gridRentas.bottomToolbar.doRefresh();
		}, this );
		
		this.btnAgregarPago.on('click', function(){
			this.agregarPago();
		}, this);
		
		this.btnAgregarDiasExtra.on('click', function(){
			this.agregarDiasExtra();
		}, this);
		
		this.cmbStatusRenta.on('select',function(combo, record, index){	
				this.gridRentas.bottomToolbar.doRefresh();			
		},this);
		
		this.cmbCliente.on('select',function(combo, record, index){	
				this.gridRentas.bottomToolbar.doRefresh();			
		},this);
		
		this.cmbTrabajador.on('select',function(combo, record, index){	
				this.gridRentas.bottomToolbar.doRefresh();			
		},this);
		
		this.gridRentas.store.on('beforeload',function(){
				this.gridRentas.store.baseParams=this.gridRentas.store.baseParams || {};
				this.gridRentas.store.baseParams.fechainicio=this.txtFechaInicio.getValue().dateFormat('Y-m-d');
				this.gridRentas.store.baseParams.fechafin=this.txtFechaFin.getValue().dateFormat('Y-m-d');
				this.gridRentas.store.baseParams.id_cliente=this.cmbCliente.getValue() || 0;
				this.gridRentas.store.baseParams.id_trabajador=this.cmbTrabajador.getValue() || 0;
				this.gridRentas.store.baseParams.filtroStatus=this.cmbStatusRenta.getValue() || 0;
				this.gridRentas.store.baseParams.filtroFechas= this.chkFechas.checked == true ? 1 : 0;
				this.gridRentas.store.baseParams.filtroCobradas= (this.btnCobradas && this.btnCobradas.pressed) ? 1 : 0;
				this.gridRentas.store.baseParams.filtroRecogidas= (this.btnRecogidas && this.btnRecogidas.pressed) ? 1 : 0;
				this.gridRentas.store.baseParams.filtro=this.txtFiltro.getValue();
				
				//this.filtroCobradas = 0;
				//this.filtroRecogidas = 0;
				
			},this);
		
		this.gridRentas.store.on('load',function(){
			this.el.unmask();
		},this);
		
		 this.gridRentas.on('rowclick', this.onRowClick, this);
		 
		this.btnEditar.on('click', function(){
			this.editar();			
		}, this); 
		
		this.btnCancelarPedido.on('click', function(){
			this.cancelar();
		}, this);
		
		this.btnVerPagos.on('click', function(){
			this.verpagos();
		}, this);
		
		this.btnReimprime.on('click', function(){
			this.imprimirTicket();
		}, this);

		this.btnEntregaAnticipada.on('click', function(){
			this.entregaAnticipada();
		}, this);			
				
		this.gridRentas.on('celldblclick', this.editar , this);
		
		this.gridRentas.bottomToolbar.doRefresh(); 
	},
	inizializaTpls:function(){
		this.cmbCliente.tpl = new Ext.XTemplate(
			'<tpl for=".">'+
				'<div class="x-combo-list-item">'+
					'<div><b>{nombre}</b></div>'+
					'<div><i>{calle}</i></div>'+
					'<div><i>{celular}</i></div>'+
				'</div>'+
			'</tpl>'
		);
		
		// this.cmbProducto.tpl = new Ext.XTemplate(
			// '<tpl for=".">'+
				// '<div class="x-combo-list-item">'+
					// '<div><b>{descripcion}</b></div>'+
					// '<div><i>{codigo_barra}</i></div>'+					
				// '</div>'+
			// '</tpl>'
		// );
		
		this.cmbStatusRenta.tpl = new Ext.XTemplate('<tpl for=".">',
		 '<div class="x-combo-list-item">',
			'<tpl if="' + this.cmbStatusRenta.valueField + ' == 0">',
				'<img src="images/iconos/status0.png" style="float:left;" />',
			'</tpl>',
			'<tpl if="' + this.cmbStatusRenta.valueField + ' == 1">',
				'<img src="images/iconos/status1.png" style="float:left;" />',
			'</tpl>',
			'<tpl if="' + this.cmbStatusRenta.valueField + ' == 2">',
				'<img src="images/iconos/status3.png" style="float:left;" />',
			'</tpl>',			
			'<div style="float:left;margin:0 0 2px 2px">{' + this.cmbStatusRenta.displayField + '}</div>',
			'</div>',
		'</tpl>');
		
	},
	inicializaRenders: function(){
		var colModel=this.gridRentas.getColumnModel();
		var columna=colModel.getColumnById('colStatusRenta');
        columna.renderer=this.renderStatusRenta;
	},
	initComponent: function() {
        formRentas.superclass.initComponent.call(this);
		this.gridRentas.columnaStatus="status";
		
		
		 
		this.inicializarStores();
		this.inicializarEventos();
		this.inizializaTpls();
		this.inicializaRenders();
		
    },
	editar: function(Grid, rowIndex, columnIndex, e){		
		var record = this.gridRentas.store.getAt(this.idSeleccionado);				
			var id = record.data.id_pedido;
			var id_asignacion = record.data.id_asignacion;
			
			this.formRentaWin = new formRentasWindow();
				this.formRentaWin.id_pedido = id;
				this.formRentaWin.id_asignacion = id_asignacion;
				this.formRentaWin.show();
				
				this.formRentaWin.on("rentaGuardado", function(){
					this.gridRentas.bottomToolbar.doRefresh();		
				}, this);
		
	},
	agregarPago: function(Grid, rowIndex, columnIndex, e){
		var record = this.gridRentas.store.getAt(this.idSeleccionado);
		var id = record.data.id_pedido;		
		
		this.formPagoWin = new formRentasPagosWindow();
		this.formPagoWin.idReg = 0;
		this.formPagoWin.id_pedido = id;
		this.formPagoWin.show();
		
		this.formPagoWin.on("pagoGuardado", function(){
			this.gridRentas.bottomToolbar.doRefresh();
		}, this);
	},
	agregarDiasExtra: function(Grid, rowIndex, columnIndex, e){
		var record = this.gridRentas.store.getAt(this.idSeleccionado);
		var id = record.data.id_pedido;		
		
		this.formDiasRentaWin = new formRentasDiasExtraWindow();
		this.formDiasRentaWin.idReg = id;
		this.formDiasRentaWin.show();
		
		this.formDiasRentaWin.on("diasGuardado", function(){
			this.gridRentas.bottomToolbar.doRefresh();
		}, this);
	},
	entregaAnticipada: function(btn,id){
		switch(btn){	//ESTE SWITCH ES USADO PARA ANALIZAR LO QUE TRATA DE HACER EL USUARIO, LA PRIERA VEZ DEBE ENTRAR A default:
    	case 'no':
    		return;
    	break;
    	case 'yes':
    		this.entregaAnticipada('entrega');
    		return;
    		break;
    	case 'entrega':
    		break;		//SALE DEL SWITCH Y SIGUE EJECUTANDOSE LA FUNCI�N
    	case undefined:	//AQUI ENTRA LA PRIMERA VEZ
    	case false:    		
    	default:
    		var me=this;    		
    		Ext.Msg.show({
 			   title:'Confirme por favor',
 			   msg: "¿Desea entregar la Renta?",
 			   buttons: Ext.Msg.YESNO,
 			   fn: function(btn){	    				
    				me.entregaAnticipada(btn);
    			},
 			   scope:this,
 			   icon: Ext.MessageBox.QUESTION
 			});
    		return;
		} 
		
		if (id==undefined){	//obtener el id del registro seleccionado
    		var  sel=this.gridRentas.getSelectionModel().getSelections();
    		if (sel.length==undefined || sel.length==0){
    			return;
    		}else{
    			id=sel[0].id;    			
    		}
    	}
		
		this.el.mask(eno.mensajeDeEspera);
		Ext.Ajax.request({
			params: { id_pedido: id },
			scope:this,
		   	url: 'app.php/pedidos/entregaanticipada',
		   	success: function(response,options){	
				var respuesta=Ext.decode(response.responseText);
				if (respuesta.success==false){
					this.el.unmask();
					return;
				}
				
				this.gridRentas.bottomToolbar.doRefresh();		
				
		   	},
		   	failure: function(){
		   		this.el.unmask();
		   	}		   
		});
	},
	cancelar:function(btn,id){
		switch(btn){	//ESTE SWITCH ES USADO PARA ANALIZAR LO QUE TRATA DE HACER EL USUARIO, LA PRIERA VEZ DEBE ENTRAR A default:
    	case 'no':
    		return;
    	break;
    	case 'yes':
    		this.cancelar('borrar');
    		return;
    		break;
    	case 'borrar':
    		break;		//SALE DEL SWITCH Y SIGUE EJECUTANDOSE LA FUNCI�N
    	case undefined:	//AQUI ENTRA LA PRIMERA VEZ
    	case false:    		
    	default:
    		var me=this;    		
    		Ext.Msg.show({
 			   title:'Confirme por favor',
 			   msg: "¿Desea cancelar la Renta?",
 			   buttons: Ext.Msg.YESNO,
 			   fn: function(btn){	    				
    				me.cancelar(btn);
    			},
 			   scope:this,
 			   icon: Ext.MessageBox.QUESTION
 			});
    		return;
		} 
		
		if (id==undefined){	//obtener el id del registro seleccionado
    		var  sel=this.gridRentas.getSelectionModel().getSelections();
    		if (sel.length==undefined || sel.length==0){
    			return;
    		}else{
    			id=sel[0].id;    			
    		}
    	}
		
		this.el.mask(eno.mensajeDeEspera);
		Ext.Ajax.request({
			params: { id_pedido: id },
			scope:this,
		   	url: 'app.php/pedidos/cancelarrenta',
		   	success: function(response,options){	
				var respuesta=Ext.decode(response.responseText);
				if (respuesta.success==false){
					this.el.unmask();
					return;
				}
				
				this.gridRentas.bottomToolbar.doRefresh();		
				
		   	},
		   	failure: function(){
		   		this.el.unmask();
		   	}		   
		});
	},
	verpagos: function(Grid, rowIndex, columnIndex, e){
		var record = this.gridRentas.store.getAt(this.idSeleccionado);
		var id = record.data.id_pedido;
		
		this.formGridPagos = new formRentasGridPagosWindow();
		this.formGridPagos.id_pedido = id;
		this.formGridPagos.show();	
		
		this.formGridPagos.on("pagoEliminado", function(){
			this.gridRentas.bottomToolbar.doRefresh();
		}, this);
		
	},
	onRowClick : function( grid ,rowIndex, e ){
		var  sel=this.gridRentas.getSelectionModel().getSelections();
		if (sel.length==undefined || sel.length==0){
			this.btnEditar.setDisabled(true);
			this.btnCancelarPedido.setDisabled(true);			
			this.btnAgregarPago.setDisabled(true);
			this.btnAgregarDiasExtra.setDisabled(true);
			this.btnVerPagos.setDisabled(true);
			this.btnReimprime.setDisabled(true);
			this.btnEntregaAnticipada.setDisabled(true);
			this.idSeleccionado = rowIndex;
			
		}else{
			this.btnEditar.setDisabled(false);
			this.btnCancelarPedido.setDisabled(false);
			this.btnAgregarPago.setDisabled(false);
			this.btnAgregarDiasExtra.setDisabled(false);
			this.btnVerPagos.setDisabled(false);
			this.btnReimprime.setDisabled(false)
			this.btnEntregaAnticipada.setDisabled(false);
			this.idSeleccionado = rowIndex;
		}
		
		
	},
	getParamsImprimir:function(){
		var record = this.gridRentas.store.getAt(this.idSeleccionado);				
		var id = record.data.id_pedido;
		
		return {
			IDPed:id
		};
	},
	imprimirTicket: function(){
		var params=this.getParamsImprimir();
		Ext.Ajax.request({
			params: params,
		   url: 'app.php/pedidos/generarreportepedido',
		   success: function(response, opts){
				//Solicita el PDF
				var obj = Ext.decode(response.responseText);
				if (!obj.success){	//Prosegir solo en caso de exito
					return;
				}
				var identificador=obj.data.identificador;
				window.open("app.php/pedidos/getpdfpedido?identificador="+identificador,'rep_cor',"height=600,width=800");							
			},
		   failure: function(){
				alert("El servidor ha respondido con un mensaje de error");
			}						   
		   
		});
		
		
	}
	
});
Ext.reg('formRentas', formRentas);
